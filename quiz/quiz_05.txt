EE 200 pre-class quiz 5
Read chapter 9 of All of Programming
Due via provide, 9/20 at 3:00pm
  `provide ee200 q5 quiz_05.txt`
Write your responses below the prompts.  Please don't delete any of the
existing text; you'll make the grader fail.  For multiple choice, just put an
'x' or some other character in the brackets.



1)  Which are valid ways to declare an array?
(select all that apply)
[x] int kiwi[3];
[x] int banana[4] = {1, 3, 5, 7};
[x] int watermelon[] = {2, 4, 6};
[x] int orange[3] = {2, 3};
[ ] int peach[3] = {5, 10, 15, 20};


2)  What is a dangling pointer?
(select one)
[ ] A pointer to which nothing points (i.e., nothing points to it)
[x] A pointer that no longer points to something valid
[ ] A pointer whose value is zero
[ ] A pointer which points to a value of zero



3)  If we have the declaration
  char pear[100];

What is the result of sizeof(pear[1])?
(select one)
[x] 1
[ ] 2
[ ] 4
[ ] 100
[ ] It depends on the architecture/compiler



4)  If we have the declarations:
  char pear[100];
  char* plum = pear;

What is the result of sizeof(plum)?
(select one)
[ ] 1
[ ] 2
[ ] 4
[ ] 100
[x] It depends on the architecture/compiler



5)  If we have the declaration
  int grape[10];
  int* raisin = grape;

Which of the following are valid accesses of the array (i.e., not off the ends or otherwise invalid)?

(select all that apply)
[x] grape[0]
[x] grape[1]
[ ] grape[10]
[ ] grape[11]
[x] *raisin
[ ] *raisin[2]
[x] *(raisin+2)
[x] raisin[2]


6)  What questions do you have about the material in this chapter?
(free response)
After the size of an array is initialized, it can not be changed anymore. Does that mean we can't not append a value to an existed array if the array is already full?

7)  What concepts would you most like to review?
(free response)
Dangling Pointers
